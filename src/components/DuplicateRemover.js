import React, { useState } from 'react';
import '../styles/DuplicateRemover.css';

const DuplicateRemover = () => {
  const [text, setText] = useState('');
  const [result, setResult] = useState('');
  const [stats, setStats] = useState({ total: 0, unique: 0, removed: 0 });
  const [caseSensitive, setCaseSensitive] = useState(true);
  const [trimLines, setTrimLines] = useState(true);
  const [preserveOrder, setPreserveOrder] = useState(true);
  const [showStats, setShowStats] = useState(false);

  const handleTextChange = (e) => {
    const newText = e.target.value;
    setText(newText);
    setShowStats(false);
  };

  const handleRemoveDuplicates = () => {
    if (!text.trim()) {
      setResult('');
      setStats({ total: 0, unique: 0, removed: 0 });
      return;
    }

    const lines = text.split('\n');
    const totalLines = lines.length;
    
    let uniqueLines = [];
    let seenLines = new Set();
    
    lines.forEach(line => {
      let processedLine = line;
      
      if (trimLines) {
        processedLine = line.trim();
      }
      
      if (!caseSensitive) {
        processedLine = processedLine.toLowerCase();
      }
      
      if (!seenLines.has(processedLine) && processedLine !== '') {
        seenLines.add(processedLine);
        uniqueLines.push(line);
      }
    });
    
    if (!preserveOrder) {
      uniqueLines.sort();
    }
    
    const uniqueCount = uniqueLines.length;
    const removedCount = totalLines - uniqueCount;
    
    setResult(uniqueLines.join('\n'));
    setStats({
      total: totalLines,
      unique: uniqueCount,
      removed: removedCount
    });
    setShowStats(true);
  };

  const handleClear = () => {
    setText('');
    setResult('');
    setStats({ total: 0, unique: 0, removed: 0 });
    setShowStats(false);
  };

  const handleCopy = () => {
    if (result) {
      navigator.clipboard.writeText(result);
      // Hi·ªÉn th·ªã th√¥ng b√°o sao ch√©p th√†nh c√¥ng (c√≥ th·ªÉ th√™m sau)
    }
  };

  // Ph∆∞∆°ng ti·ªán ti·ªán √≠ch ƒë·ªÉ hi·ªÉn th·ªã d√≤ng v√† k√Ω t·ª±
  const countLinesAndChars = (text) => {
    if (!text) return { lines: 0, chars: 0 };
    const lines = text.split('\n').length;
    const chars = text.length;
    return { lines, chars };
  };

  const { lines: inputLines, chars: inputChars } = countLinesAndChars(text);
  const { lines: outputLines, chars: outputChars } = countLinesAndChars(result);

  return (
    <div className="duplicate-remover-container">
      <h1>Duplicate Remover</h1>
      <p className="description">
        D·ªÖ d√†ng x√≥a c√°c d√≤ng tr√πng l·∫∑p t·ª´ vƒÉn b·∫£n c·ªßa b·∫°n. 
        D√°n vƒÉn b·∫£n c·ªßa b·∫°n v√†o v√† nh·∫≠n vƒÉn b·∫£n m·ªõi v·ªõi c√°c d√≤ng tr√πng l·∫∑p ƒë√£ b·ªã lo·∫°i b·ªè.
      </p>

      <div className="main-content">
        <div className="input-section">
          <div className="section-header">
            <h2>Nh·∫≠p vƒÉn b·∫£n</h2>
            <div className="input-stats">
              <span>{inputLines} d√≤ng</span>
              <span>{inputChars} k√Ω t·ª±</span>
            </div>
          </div>

          <textarea
            className="text-input"
            value={text}
            onChange={handleTextChange}
            placeholder="D√°n vƒÉn b·∫£n c·ªßa b·∫°n ·ªü ƒë√¢y..."
            rows="10"
          ></textarea>

          <div className="options-container">
            <div className="options-group">
              <h3>T√πy ch·ªçn</h3>
              
              <div className="option-row">
                <label className="checkbox-container">
                  <input
                    type="checkbox"
                    checked={caseSensitive}
                    onChange={() => setCaseSensitive(!caseSensitive)}
                  />
                  <span className="custom-checkbox"></span>
                  <span className="option-text">Ph√¢n bi·ªát ch·ªØ hoa ch·ªØ th∆∞·ªùng</span>
                </label>
                
                <label className="checkbox-container">
                  <input
                    type="checkbox"
                    checked={trimLines}
                    onChange={() => setTrimLines(!trimLines)}
                  />
                  <span className="custom-checkbox"></span>
                  <span className="option-text">X√≥a kho·∫£ng tr·∫Øng ƒë·∫ßu/cu·ªëi</span>
                </label>
              </div>
              
              <div className="option-row">
                <label className="checkbox-container">
                  <input
                    type="checkbox"
                    checked={preserveOrder}
                    onChange={() => setPreserveOrder(!preserveOrder)}
                  />
                  <span className="custom-checkbox"></span>
                  <span className="option-text">Gi·ªØ th·ª© t·ª± ban ƒë·∫ßu</span>
                </label>
              </div>
            </div>
          </div>

          <div className="button-container">
            <button className="action-button primary-button" onClick={handleRemoveDuplicates}>
              <span className="button-icon">üîç</span>
              X√≥a d√≤ng tr√πng l·∫∑p
            </button>
            <button className="action-button secondary-button" onClick={handleClear}>
              <span className="button-icon">üóëÔ∏è</span>
              X√≥a t·∫•t c·∫£
            </button>
          </div>
        </div>

        <div className="result-section">
          <div className="section-header">
            <h2>K·∫øt qu·∫£</h2>
            <div className="input-stats">
              <span>{outputLines} d√≤ng</span>
              <span>{outputChars} k√Ω t·ª±</span>
            </div>
          </div>

          {showStats && (
            <div className="stats-container">
              <div className="stat-box">
                <span className="stat-label">T·ªïng d√≤ng ban ƒë·∫ßu:</span>
                <span className="stat-value">{stats.total}</span>
              </div>
              <div className="stat-box">
                <span className="stat-label">D√≤ng duy nh·∫•t:</span>
                <span className="stat-value">{stats.unique}</span>
              </div>
              <div className="stat-box">
                <span className="stat-label">D√≤ng ƒë√£ x√≥a:</span>
                <span className="stat-value highlight">{stats.removed}</span>
              </div>
            </div>
          )}

          <textarea
            className="text-result"
            value={result}
            readOnly
            placeholder="K·∫øt qu·∫£ s·∫Ω hi·ªÉn th·ªã ·ªü ƒë√¢y..."
            rows="10"
          ></textarea>

          <button className="copy-button" onClick={handleCopy} disabled={!result}>
            <span className="button-icon">üìã</span>
            Sao ch√©p
          </button>
        </div>
      </div>

      <div className="tips-section">
        <h3>M·∫πo s·ª≠ d·ª•ng</h3>
        <ul>
          <li>
            <strong>Ph√¢n bi·ªát ch·ªØ hoa ch·ªØ th∆∞·ªùng</strong>: Khi ƒë∆∞·ª£c b·∫≠t, "Hello" v√† "hello" s·∫Ω ƒë∆∞·ª£c coi l√† kh√°c nhau.
          </li>
          <li>
            <strong>X√≥a kho·∫£ng tr·∫Øng</strong>: Khi ƒë∆∞·ª£c b·∫≠t, kho·∫£ng tr·∫Øng ·ªü ƒë·∫ßu v√† cu·ªëi m·ªói d√≤ng s·∫Ω b·ªã x√≥a tr∆∞·ªõc khi so s√°nh.
          </li>
          <li>
            <strong>Gi·ªØ th·ª© t·ª± ban ƒë·∫ßu</strong>: Khi ƒë∆∞·ª£c b·∫≠t, th·ª© t·ª± ban ƒë·∫ßu c·ªßa c√°c d√≤ng s·∫Ω ƒë∆∞·ª£c gi·ªØ nguy√™n. Khi t·∫Øt, c√°c d√≤ng s·∫Ω ƒë∆∞·ª£c s·∫Øp x·∫øp theo b·∫£ng ch·ªØ c√°i.
          </li>
        </ul>
      </div>
    </div>
  );
};

export default DuplicateRemover; 